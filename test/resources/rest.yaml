#
# REST automation is the recommended way to create REST endpoints properly
# Note that URL comparison is case-insensitive but case sensitivity is preserved
# for the original URL and path parameters
#
rest:
  # "event.api.service" accepts an external application making event call to a function in this app instance.
  # It handles both RPC and drop-n-forget async requests
  # Optionally, you can add "authentication" service to validate incoming request from the external application.
  - service: "event.api.service"
    methods: ['POST']
    url: "/api/event"
    timeout: 60s
    authentication: 'event.api.auth'
    tracing: true       

  # service should be a target service name or a list of service names
  # If more than one service name is provided, the first one is the primary target
  # and the rest are secondary target(s). The system will copy the HTTP request event to the secondary targets.
  #
  # This feature is used for seamless legacy system migration where we can send
  # the same request to the old and the new services at the same time for A/B comparison.
  - service: ["hello.world"]
    methods: ['GET', 'PUT', 'POST', 'HEAD', 'PATCH', 'DELETE']
    url: "/api/hello/world"
    flow: "hello-world"
    timeout: 10s
    #
    # Optional authentication service which should return a true or false result
    # The authentication service can also add session info in headers using EventEnvelope as a response
    # and annotate trace with key-values that you want to persist into distributed trace logging.
    #
    # You can also route the authentication request to different functions based on HTTP request header
    # i.e. you can provide a single authentication function or a list of functions selected by header routing.
    #
    # If you want to route based on header/value, use the "key: value : service" format.
    # For routing using header only, use "key: service" format
    # For default authentication service, use "default: service" format
    #
    # authentication: "v1.api.auth"
    authentication:
    - "x-app-name: demo : v1.demo.auth"
    - "authorization: event.api.auth"
    - "default: event.api.auth"
    cors: cors_1
    headers: header_1
    # optionally, you can turn on Distributed Tracing
    tracing: true

  - service: "hello.world"
    methods: ['POST']
    url: "/api/hello/upload"
    # to support multipart file upload, set upload to true
    upload: true
    timeout: 15s
    cors: cors_1
    headers: header_1

  - service: "hello.list"
    methods: ['POST']
    url: "/api/hello/list"
    timeout: 15s
    cors: cors_1
    headers: header_1

  # demonstrate path parameter and wild card
  - service: "hello.world"
    methods: ['GET', 'PUT', 'POST']
    url: "/api/simple/{task}/*"
    timeout: 12
    cors: cors_1
    headers: header_1

  #
  # When service is a URL, it will relay the HTTP or HTTPS requests.
  # "trust_all_cert" and "url_rewrite" are optional.
  #
  # For target host with self-signed certificate, you may set "trust_all_cert" to true.
  # trust_all_cert: true
  #
  # "url_rewrite", when present as a list of 2 strings, is used to rewrite the url.
  # e.g. url_rewrite: ['/api/v1', '/v1/api']
  # In this example, "/api/v1" will be replaced with "/v1/api"
  #
  # In this example, the rest.yaml parser will print a warning about the "trust_all_cert" parameter
  # because it is not relevant for non-secure an HTTP endpoint.
  #
  - service: "http://127.0.0.1:60800"
    trust_all_cert: true
    methods: ['GET', 'PUT', 'POST']
    url: "/api/invalid/*"
    url_rewrite: ['/api/invalid', '/api']
    timeout: 20
    cors: cors_1
    headers: header_1
    tracing: true 

  - service: "hello.download"
    methods: ['GET']
    url: "/api/hello/download"
    timeout: 20
    cors: cors_1
    headers: header_1
    tracing: true

#
# REST endpoints for unit tests
#
  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/greetings/{user}?ex=_"
    flow: 'greetings'
    timeout: 4s
    # optional authentication service which should return result as an EventEnvelope
    # with session info in headers and true or false in body
    #    authentication: "v1.api.auth"
    cors: cors_1
    headers: header_1
    # optionally, you can turn on Distributed Tracing
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/no-such-flow"
    flow: 'no-such-flow'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['PUT']
    url: "/api/ext/state/{user}"
    flow: 'externalize-put-key-value'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/ext/state/{user}"
    flow: 'externalize-get-key-value'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/type/matching"
    flow: 'type-matching'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['POST']
    url: "/api/body/test"
    flow: 'body-test'
    timeout: 10s

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/header/test"
    flow: 'header-test'
    timeout: 10s

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/file/vault"
    flow: 'file-vault-test'
    timeout: 10s

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/circuit/breaker/{accept}"
    flow: 'circuit-breaker-example'
    timeout: 10s
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/parent-greeting/{user}?ex=_"
    flow: 'parent-greetings'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/missing-flow/{user}?ex=_"
    flow: 'missing-sub-flow'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/timeout/{user}?ex=_"
    flow: 'timeout-test'
    timeout: 5s
    cors: cors_1
    headers: header_1
    tracing: true   

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/decision?decision=_"
    flow: 'decision-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/noop/decision?decision=_"
    flow: 'decision-with-no-op-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/numeric-decision?decision=_"
    flow: 'numeric-decision-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true   

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/sequential/{user}?seq=_"
    flow: 'sequential-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true  

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/response/{user}?seq=_"
    flow: 'response-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/delayed-response/{user}?seq=_"
    flow: 'delayed-response-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/fork-n-join/{user}?seq=_"
    flow: 'fork-n-join-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true    

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/pipeline/{user}?seq=_"
    flow: 'pipeline-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/for-loop/{user}?seq=_"
    flow: 'for-loop-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true   

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/for-loop-break/{user}?seq=_"
    flow: 'for-loop-break'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/for-loop-continue/{user}?seq=_"
    flow: 'for-loop-continue'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/pipeline-exception/{user}?seq=_"
    flow: 'pipeline-exception'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/while-loop/{user}?seq=_"
    flow: 'while-loop'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/while-loop-break/{user}?seq=_"
    flow: 'while-loop-break'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/while-loop-continue/{user}?seq=_"
    flow: 'while-loop-continue'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true 

  - service: "http.flow.adapter"
    methods: ['GET']
    url: "/api/parallel"
    flow: 'parallel-test'
    timeout: 10s
    cors: cors_1
    headers: header_1
    tracing: true                   
#
# CORS HEADERS for pre-flight (HTTP OPTIONS) and normal responses
#
# Access-Control-Allow-Origin must be "*" or domain name starting with "http://" or "https://"
# The use of wildcard "*" should only be allowed for non-prod environments.
#
# For production, please add the "api.origin" key in application.properties.
#
cors:
  - id: cors_1
    options:
      - "Access-Control-Allow-Origin: ${api.origin:*}"
      - "Access-Control-Allow-Methods: GET, DELETE, PUT, POST, PATCH, OPTIONS"
      - "Access-Control-Allow-Headers: Origin, Authorization, X-Session-Id, X-Correlation-Id, Accept, Content-Type, X-Requested-With"
      - "Access-Control-Max-Age: 86400"
    headers:
      - "Access-Control-Allow-Origin: ${api.origin:*}"
      - "Access-Control-Allow-Methods: GET, DELETE, PUT, POST, PATCH, OPTIONS"
      - "Access-Control-Allow-Headers: Origin, Authorization, X-Session-Id, X-Correlation-Id, Accept, Content-Type, X-Requested-With"
      - "Access-Control-Allow-Credentials: true"

#
# add/drop/keep HTTP request and response headers
#
headers:
  - id: header_1
    request:
      #
      # headers to be inserted
      #    add: ["hello-world: nice"]
      #
      # keep and drop are mutually exclusive where keep has precedent over drop
      # i.e. when keep is not empty, it will drop all headers except those to be kept
      # when keep is empty and drop is not, it will drop only the headers in the drop list
      # e.g.
      # keep: ['x-session-id', 'user-agent']
      # drop: ['Upgrade-Insecure-Requests', 'cache-control', 'accept-encoding', 'host', 'connection']
      #
      drop: ['Upgrade-Insecure-Requests', 'cache-control', 'accept-encoding', 'host', 'connection']
      
    response:
      #
      # the system can filter the response headers set by a target service,
      # but it cannot remove any response headers set by the underlying servlet container.
      # However, you may override non-essential headers using the "add" directive. e.g. the "server" header.
      # i.e. don't touch essential headers such as content-length.
      #
      #     keep: ['only_this_header_and_drop_all']
      #     drop: ['drop_only_these_headers', 'another_drop_header']
      #
      #      add: ["server: mercury"]
      #
      # You may want to add cache-control to disable browser and CDN caching.
      # add: ["Cache-Control: no-cache, no-store", "Pragma: no-cache", "Expires: Thu, 01 Jan 1970 00:00:00 GMT"]
      #
      add:
        - "Strict-Transport-Security: max-age=31536000"
        - "Cache-Control: no-cache, no-store"
        - "Pragma: no-cache"
        - "Expires: Thu, 01 Jan 1970 00:00:00 GMT"
