/*
 * DO NOT modify this file, it will be updated automatically.
 */
import fs from 'fs';
import { fileURLToPath } from "url";
import { Logger, Utility, AppConfig, Platform, RestAutomation, EventScriptEngine } from 'mercury-composable';
${import-statements}
//
const log = Logger.getInstance();
const util = new Utility();
//
function getRootFolder() {
    const folder = fileURLToPath(new URL("..", import.meta.url));
    // for windows OS, convert backslash to regular slash and drop drive letter from path
    const filePath = folder.includes('\\')? folder.replaceAll('\\', '/') : folder;
    const colon = filePath.indexOf(':');
    return colon === 1? filePath.substring(colon+1) : filePath;
}
//
export class ComposableLoader {
    private static loaded = false;
    //
    static async initialize(serverPort?: number, isUnitTest = false) {
        // execute only once
        if (!ComposableLoader.loaded) {
            ComposableLoader.loaded = true;
            try {
                let resourcePath = getRootFolder() + 'resources';
                if (isUnitTest) {
                    const parts = util.split(getRootFolder(), '/');
                    parts.pop();
                    resourcePath = '/' + parts.join('/') + '/test/resources';
                }
                if (!fs.existsSync(resourcePath)) {
                    throw new Error('Missing resources folder');
                }
                const stats = fs.statSync(resourcePath);
                if (!stats.isDirectory()) {
                    throw new Error('resources is not a folder');
                }
                // initialize base configuration
                const config = AppConfig.getInstance(resourcePath);
                // register the functions into the event system
                const platform = Platform.getInstance();
                ${service-list}
                // start Event Script system
                const eventManager = new EventScriptEngine();
                await eventManager.start();
                // override HTTP server port if running in unit test
                if (serverPort) {
                    config.set('server.port', parseInt(String(serverPort)));
                }
                // start REST automation system
                if ('true' == config.getProperty('rest.automation')) {
                    const server = RestAutomation.getInstance();
                    await server.start();
                }
                // keep the server running
                platform.runForever();
                await platform.getReady();
            } catch (e) {
                log.error(`Unable to preload - ${e.message}`);
            }
        }
    }
}
