import { EventEnvelope } from '../models/event-envelope.js';
import { Composable } from '../models/composable.js';
/**
 * This is reserved for system use.
 * DO NOT use this directly in your application code.
 */
export declare class TaskExecutor implements Composable {
    taskRefs: {};
    maxModelArraySize: number;
    initialize(): Composable;
    handleEvent(event: EventEnvelope): Promise<boolean>;
    private checkCallBack;
    private handleException;
    private inputDataMappingModelVar;
    private setInputDataMappingValue;
    private inputDataMappingNormalCase;
    private getDynamicListItem;
    private doInputDataMapping;
    private runNextFlow;
    private runNextTask;
    private resolveDelayVar;
    private executeTask;
    private getValueFromNonExistModel;
    private parseBooleanComparator;
    private outputDataMappingToFile;
    private saveTextToFile;
    private saveBytesToFile;
    private outputDateMappingSetValue;
    private doOutputDataMapping;
    private handleCallBackFromForkAndJoin;
    private evaluatePipelineCondition;
    private handleCallbackFromPipeline;
    private proceedWithNextTask;
    private handleCallback;
    private resolveCondition;
    private handleResponseTask;
    private handleEndTask;
    private handleDecisionTask;
    private handleForkAndJoin;
    private executeForkAndJoin;
    private runPipeline;
    private handlePipelineTask;
    private sendResponse;
    private queueSequentialTask;
    private queueParallelTasks;
    private pipelineCompletion;
    private evaluateForCondition;
    private getParentFolder;
    private createParentFolders;
    private callExternalStateMachine;
    private removeModelElement;
    private setRhsElement;
    private setConstantValue;
    private getConstantAsMap;
    private getConstantByType;
    private getConstantFromFile;
    private getJson;
    private getConstantValue;
    private getLhsElement;
    private validateIndexBounds;
    private checkDynamicIndex;
    private substituteDynamicIndex;
    private getStringFromModelValue;
    private replaceWithRuntimeVar;
    private substituteRuntimeVarsIfAny;
    private getTextValue;
    private getBinaryValue;
    private getLenValue;
    private convertB64;
    private getValueWithSuffix;
    private getSubstring;
    private getConcatValue;
    private getBooleanLogicalValue;
    private getBooleanValue;
    private tokenizeConcatParameters;
    private tokenizeModelParameter;
    private tokenizeTextParameter;
    private getModelTypeIndex;
    private getMappingType;
    private getValueByType;
    private abortFlow;
    private endFlow;
}
